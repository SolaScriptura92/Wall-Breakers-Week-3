class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        if(prices.size() <= 1)
            return 0;
        
        vector<int> n(prices.size()); //store the max price encounted so far beginning at the end
        int answer;
        
        n[n.size() - 1] = prices[n.size() - 1];
        int maxSoFar = prices[n.size() - 1];
        
        for(int i = n.size() - 2; i >= 0; i--) //begin at second to last. Last one must be purchased to begin
        {
            if(prices[i] > maxSoFar)
            {
                maxSoFar = prices[i];
                n[i] = maxSoFar;
            }
            
            else
            {
                n[i] = maxSoFar;
            } 
        }
        
        answer = n[0] - prices[0];
        
        for(int j = 1; j < n.size(); j++)
        {
            if(n[j] - prices[j] > answer)
                answer = n[j] - prices[j];
        }
        
        if(answer <= 0)
            return 0;
        
        else
            return answer;
    }
};
